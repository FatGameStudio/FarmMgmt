package no.lebegue.christophe.FarmMgmt.Controller;


import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import no.lebegue.christophe.FarmMgmt.Entity.Task;
import no.lebegue.christophe.FarmMgmt.Entity.TaskRepository;
import no.lebegue.christophe.FarmMgmt.Entity.ActivityRepository;
import no.lebegue.christophe.FarmMgmt.Entity.Status;
import no.lebegue.christophe.FarmMgmt.Entity.ZoneRepository;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/tasks") // This means URL's start with /demo (after Application path)
public class TaskController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private TaskRepository repository;
	@Autowired 
	private ActivityRepository activityRepository;
	@Autowired 
	private ZoneRepository zoneRepository;
	
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewTask (@RequestParam String name, @RequestParam String date, @RequestParam int activityId, @RequestParam int zoneId, @RequestParam Status status ) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Task n = new Task();
		n.setName(name);
		DateFormat sourceFormat = new SimpleDateFormat("dd-MM-yyyy");
		
		try {
			n.setDate(sourceFormat.parse(date));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		n.setActivity(activityRepository.findById(activityId).get());
		n.setZone(zoneRepository.findById(zoneId).get());
		n.setStatus(status.name());
		
		
		repository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Task> getAllZone() {
		// This returns a JSON or XML with the users
		return repository.findAll();
	}
}